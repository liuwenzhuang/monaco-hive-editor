import { FunctionKeyword } from '../interface'

const FunctionKeywords: FunctionKeyword[] = [
  {
    desc: 'Returns the rounded BIGINT value of a.',
    returnType: 'round(DOUBLE a)',
    name: 'round',
    synax: 'round(DOUBLE a)',
  },
  {
    desc: 'Returns a rounded to d decimal places.',
    returnType: 'round(DOUBLE a, INT d)',
    name: 'round',
    synax: 'round(DOUBLE a, INT d)',
  },
  {
    desc: "Returns the rounded BIGINT value of a using HALF_EVEN rounding mode (as of Hive 1.3.0, 2.0.0). Also known as Gaussian rounding or bankers' rounding. Example: bround(2.5) = 2, bround(3.5) = 4.",
    returnType: 'bround(DOUBLE a)',
    name: 'bround',
    synax: 'bround(DOUBLE a)',
  },
  {
    desc: 'Returns a rounded to d decimal places using HALF_EVEN rounding mode (as of Hive 1.3.0, 2.0.0). Example: bround(8.25, 1) = 8.2, bround(8.35, 1) = 8.4.',
    returnType: 'bround(DOUBLE a, INT d)',
    name: 'bround',
    synax: 'bround(DOUBLE a, INT d)',
  },
  {
    desc: 'Returns the maximum BIGINT value that is equal to or less than a.',
    returnType: 'floor(DOUBLE a)',
    name: 'floor',
    synax: 'floor(DOUBLE a)',
  },
  {
    desc: 'Returns the minimum BIGINT value that is equal to or greater than a.',
    returnType: 'ceil(DOUBLE a), ceiling(DOUBLE a)',
    name: 'ceil',
    synax: 'ceil(DOUBLE a), ceiling(DOUBLE a)',
  },
  {
    desc: 'Returns a random number (that changes from row to row) that is distributed uniformly from 0 to 1. Specifying the seed will make sure the generated random number sequence is deterministic.',
    returnType: 'rand(), rand(INT seed)',
    name: 'rand',
    synax: 'rand(), rand(INT seed)',
  },
  {
    desc: 'Returns ea where e is the base of the natural logarithm. Decimal version added in Hive 0.13.0.',
    returnType: 'exp(DOUBLE a), exp(DECIMAL a)',
    name: 'exp',
    synax: 'exp(DOUBLE a), exp(DECIMAL a)',
  },
  {
    desc: 'Returns the natural logarithm of the argument a. Decimal version added in Hive 0.13.0.',
    returnType: 'ln(DOUBLE a), ln(DECIMAL a)',
    name: 'ln',
    synax: 'ln(DOUBLE a), ln(DECIMAL a)',
  },
  {
    desc: 'Returns the base-10 logarithm of the argument a. Decimal version added in Hive 0.13.0.',
    returnType: 'log10(DOUBLE a), log10(DECIMAL a)',
    name: 'log10',
    synax: 'log10(DOUBLE a), log10(DECIMAL a)',
  },
  {
    desc: 'Returns the base-2 logarithm of the argument a. Decimal version added in Hive 0.13.0.',
    returnType: 'log2(DOUBLE a), log2(DECIMAL a)',
    name: 'log2',
    synax: 'log2(DOUBLE a), log2(DECIMAL a)',
  },
  {
    desc: 'Returns the base-base logarithm of the argument a. Decimal versions added in Hive 0.13.0.',
    returnType: 'log(DOUBLE base, DOUBLE a)log(DECIMAL base, DECIMAL a)',
    name: 'log',
    synax: 'log(DOUBLE base, DOUBLE a)log(DECIMAL base, DECIMAL a)',
  },
  {
    desc: 'Returns ap.',
    returnType: 'pow(DOUBLE a, DOUBLE p), power(DOUBLE a, DOUBLE p)',
    name: 'pow',
    synax: 'pow(DOUBLE a, DOUBLE p), power(DOUBLE a, DOUBLE p)',
  },
  {
    desc: 'Returns the square root of a. Decimal version added in Hive 0.13.0.',
    returnType: 'sqrt(DOUBLE a), sqrt(DECIMAL a)',
    name: 'sqrt',
    synax: 'sqrt(DOUBLE a), sqrt(DECIMAL a)',
  },
  {
    desc: 'Returns the number in binary format (see http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#function_bin).',
    returnType: 'bin(BIGINT a)',
    name: 'bin',
    synax: 'bin(BIGINT a)',
  },
  {
    desc: 'If the argument is an INT or binary, hex returns the number as a STRING in hexadecimal format. Otherwise if the number is a STRING, it converts each character into its hexadecimal representation and returns the resulting STRING. (See http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#function_hex, BINARY version as of Hive 0.12.0.)',
    returnType: 'hex(BIGINT a) hex(STRING a) hex(BINARY a)',
    name: 'hex',
    synax: 'hex(BIGINT a) hex(STRING a) hex(BINARY a)',
  },
  {
    desc: 'Inverse of hex. Interprets each pair of characters as a hexadecimal number and converts to the byte representation of the number. (BINARY version as of Hive 0.12.0, used to return a string.)',
    returnType: 'unhex(STRING a)',
    name: 'unhex',
    synax: 'unhex(STRING a)',
  },
  {
    desc: 'Converts a number from a given base to another (see http://dev.mysql.com/doc/refman/5.0/en/mathematical-functions.html#function_conv).',
    returnType: 'conv(BIGINT num, INT from_base, INT to_base), conv(STRING num, INT from_base, INT to_base)',
    name: 'conv',
    synax: 'conv(BIGINT num, INT from_base, INT to_base), conv(STRING num, INT from_base, INT to_base)',
  },
  {
    desc: 'Returns the absolute value.',
    returnType: 'abs(DOUBLE a)',
    name: 'abs',
    synax: 'abs(DOUBLE a)',
  },
  {
    desc: 'Returns the positive value of a mod b.',
    returnType: 'pmod(INT a, INT b), pmod(DOUBLE a, DOUBLE b)',
    name: 'pmod',
    synax: 'pmod(INT a, INT b), pmod(DOUBLE a, DOUBLE b)',
  },
  {
    desc: 'Returns the sine of a (a is in radians). Decimal version added in Hive 0.13.0.',
    returnType: 'sin(DOUBLE a), sin(DECIMAL a)',
    name: 'sin',
    synax: 'sin(DOUBLE a), sin(DECIMAL a)',
  },
  {
    desc: 'Returns the arc sin of a if -1<=a<=1 or NULL otherwise. Decimal version added in Hive 0.13.0.',
    returnType: 'asin(DOUBLE a), asin(DECIMAL a)',
    name: 'asin',
    synax: 'asin(DOUBLE a), asin(DECIMAL a)',
  },
  {
    desc: 'Returns the cosine of a (a is in radians). Decimal version added in Hive 0.13.0.',
    returnType: 'cos(DOUBLE a), cos(DECIMAL a)',
    name: 'cos',
    synax: 'cos(DOUBLE a), cos(DECIMAL a)',
  },
  {
    desc: 'Returns the arccosine of a if -1<=a<=1 or NULL otherwise. Decimal version added in Hive 0.13.0.',
    returnType: 'acos(DOUBLE a), acos(DECIMAL a)',
    name: 'acos',
    synax: 'acos(DOUBLE a), acos(DECIMAL a)',
  },
  {
    desc: 'Returns the tangent of a (a is in radians). Decimal version added in Hive 0.13.0.',
    returnType: 'tan(DOUBLE a), tan(DECIMAL a)',
    name: 'tan',
    synax: 'tan(DOUBLE a), tan(DECIMAL a)',
  },
  {
    desc: 'Returns the arctangent of a. Decimal version added in Hive 0.13.0.',
    returnType: 'atan(DOUBLE a), atan(DECIMAL a)',
    name: 'atan',
    synax: 'atan(DOUBLE a), atan(DECIMAL a)',
  },
  {
    desc: 'Converts value of a from radians to degrees. Decimal version added in Hive 0.13.0.',
    returnType: 'degrees(DOUBLE a), degrees(DECIMAL a)',
    name: 'degrees',
    synax: 'degrees(DOUBLE a), degrees(DECIMAL a)',
  },
  {
    desc: 'Converts value of a from degrees to radians. Decimal version added in Hive 0.13.0.',
    returnType: 'radians(DOUBLE a), radians(DOUBLE a)',
    name: 'radians',
    synax: 'radians(DOUBLE a), radians(DOUBLE a)',
  },
  {
    desc: 'Returns a.',
    returnType: 'positive(INT a), positive(DOUBLE a)',
    name: 'positive',
    synax: 'positive(INT a), positive(DOUBLE a)',
  },
  {
    desc: 'Returns -a.',
    returnType: 'negative(INT a), negative(DOUBLE a)',
    name: 'negative',
    synax: 'negative(INT a), negative(DOUBLE a)',
  },
  {
    desc: "Returns the sign of a as '1.0' (if a is positive) or '-1.0' (if a is negative), '0.0' otherwise. The decimal version returns INT instead of DOUBLE. Decimal version added in Hive 0.13.0.",
    returnType: 'sign(DOUBLE a), sign(DECIMAL a)',
    name: 'sign',
    synax: 'sign(DOUBLE a), sign(DECIMAL a)',
  },
  {
    desc: 'Returns the value of e.',
    returnType: 'e()',
    name: 'e',
    synax: 'e()',
  },
  {
    desc: 'Returns the value of pi.',
    returnType: 'pi()',
    name: 'pi',
    synax: 'pi()',
  },
  {
    desc: 'Returns the factorial of a (as of Hive 1.2.0). Valid a is [0..20].',
    returnType: 'factorial(INT a)',
    name: 'factorial',
    synax: 'factorial(INT a)',
  },
  {
    desc: 'Returns the cube root of a double value (as of Hive 1.2.0).',
    returnType: 'cbrt(DOUBLE a)',
    name: 'cbrt',
    synax: 'cbrt(DOUBLE a)',
  },
  {
    desc: 'Bitwise left shift (as of Hive 1.2.0). Shifts a b positions to the left.Returns int for tinyint, smallint and int a. Returns bigint for bigint a.',
    returnType: 'shiftleft(TINYINT|SMALLINT|INT a, INT b)shiftleft(BIGINT a, INT b)',
    name: 'shiftleft',
    synax: 'shiftleft(TINYINT|SMALLINT|INT a, INT b)shiftleft(BIGINT a, INT b)',
  },
  {
    desc: 'Bitwise right shift (as of Hive 1.2.0). Shifts a b positions to the right.Returns int for tinyint, smallint and int a. Returns bigint for bigint a.',
    returnType: 'shiftright(TINYINT|SMALLINT|INT a, INT b)shiftright(BIGINT a, INT b)',
    name: 'shiftright',
    synax: 'shiftright(TINYINT|SMALLINT|INT a, INT b)shiftright(BIGINT a, INT b)',
  },
  {
    desc: 'Bitwise unsigned right shift (as of Hive 1.2.0). Shifts aÂ b positions to the right.Returns int for tinyint, smallint and int a. Returns bigint for bigint a.',
    returnType: 'shiftrightunsigned(TINYINT|SMALLINT|INT a, INT b),shiftrightunsigned(BIGINT a, INT b)',
    name: 'shiftrightunsigned',
    synax: 'shiftrightunsigned(TINYINT|SMALLINT|INT a, INT b),shiftrightunsigned(BIGINT a, INT b)',
  },
  {
    desc: 'Returns the greatest value of the list of values (as of Hive 1.1.0). Fixed to return NULL when one or more arguments are NULL, and strict type restriction relaxed, consistent with ">" operator (as of Hive 2.0.0).',
    returnType: 'greatest(T v1, T v2, ...)',
    name: 'greatest',
    synax: 'greatest(T v1, T v2, ...)',
  },
  {
    desc: 'Returns the least value of the list of values (as of Hive 1.1.0). Fixed to return NULL when one or more arguments are NULL, and strict type restriction relaxed, consistent with "<" operator (as of Hive 2.0.0).',
    returnType: 'least(T v1, T v2, ...)',
    name: 'least',
    synax: 'least(T v1, T v2, ...)',
  },
  {
    desc: 'Returns an integer between 0 and num_buckets+1 by mapping expr into the ith equally sized bucket. Buckets are made by dividing [min_value, max_value] into equally sized regions. If expr < min_value, return 1, if expr > max_value return num_buckets+1. See https://docs.oracle.com/cd/B19306_01/server.102/b14200/functions214.htm (as of Hive 3.0.0)',
    returnType: 'width_bucket(NUMERIC expr, NUMERIC min_value, NUMERIC max_value, INT num_buckets)',
    name: 'width_bucket',
    synax: 'width_bucket(NUMERIC expr, NUMERIC min_value, NUMERIC max_value, INT num_buckets)',
  },
  {
    desc: 'Returns the number of elements in the map type.',
    returnType: 'size(Map<K.V>)',
    name: 'size',
    synax: 'size(Map<K.V>)',
  },
  {
    desc: 'Returns the number of elements in the array type.',
    returnType: 'size(Array<T>)',
    name: 'size',
    synax: 'size(Array<T>)',
  },
  {
    desc: 'Returns an unordered array containing the keys of the input map.',
    returnType: 'map_keys(Map<K.V>)',
    name: 'map_keys',
    synax: 'map_keys(Map<K.V>)',
  },
  {
    desc: 'Returns an unordered array containing the values of the input map.',
    returnType: 'map_values(Map<K.V>)',
    name: 'map_values',
    synax: 'map_values(Map<K.V>)',
  },
  {
    desc: 'Returns TRUE if the array contains value.',
    returnType: 'array_contains(Array<T>, value)',
    name: 'array_contains',
    synax: 'array_contains(Array<T>, value)',
  },
  {
    desc: 'Sorts the input array in ascending order according to the natural ordering of the array elements and returns it (as of version 0.9.0).',
    returnType: 'sort_array(Array<T>)',
    name: 'sort_array',
    synax: 'sort_array(Array<T>)',
  },
  {
    desc: 'Casts the parameter into a binary.',
    returnType: 'binary(string|binary)',
    name: 'binary',
    synax: 'binary(string|binary)',
  },
  {
    desc: "Converts the results of the expression expr to <type>. For example, cast('1' as BIGINT) will convert the string '1' to its integral representation. A null is returned if the conversion does not succeed. If cast(expr as boolean) Hive returns true for a non-empty string.",
    returnType: 'cast(expr as <type>)',
    name: 'cast',
    synax: 'cast(expr as <type>)',
  },
  {
    desc: 'Converts the number of seconds from unix epoch (1970-01-01 00:00:00 UTC) to a string representing the timestamp of that moment in the current system time zone in the format of "1970-01-01 00:00:00".',
    returnType: 'from_unixtime(bigint unixtime[, string format])',
    name: 'from_unixtime',
    synax: 'from_unixtime(bigint unixtime[, string format])',
  },
  {
    desc: 'Gets current Unix timestamp in seconds. This function is not deterministic and its value is not fixed for the scope of a query execution, therefore prevents proper optimization of queries - this has been deprecated since 2.0 in favour of CURRENT_TIMESTAMP constant.',
    returnType: 'unix_timestamp()',
    name: 'unix_timestamp',
    synax: 'unix_timestamp()',
  },
  {
    desc: "Converts time string in format yyyy-MM-dd HH:mm:ss to Unix timestamp (in seconds), using the default timezone and the default locale, return 0 if fail: unix_timestamp('2009-03-20 11:30:01') = 1237573801",
    returnType: 'unix_timestamp(string date)',
    name: 'unix_timestamp',
    synax: 'unix_timestamp(string date)',
  },
  {
    desc: "Convert time string with given pattern (see [http://docs.oracle.com/javase/tutorial/i18n/format/simpleDateFormat.html]) to Unix time stamp (in seconds), return 0 if fail: unix_timestamp('2009-03-20', 'yyyy-MM-dd') = 1237532400.",
    returnType: 'unix_timestamp(string date, string pattern)',
    name: 'unix_timestamp',
    synax: 'unix_timestamp(string date, string pattern)',
  },
  {
    desc: 'Returns the date part of a timestamp string (pre-Hive 2.1.0): to_date("1970-01-01 00:00:00") = "1970-01-01". As of Hive 2.1.0, returns a date object.Prior to Hive 2.1.0 (HIVE-13248) the return type was a String because no Date type existed when the method was created.',
    returnType: 'to_date(string timestamp)',
    name: 'to_date',
    synax: 'to_date(string timestamp)',
  },
  {
    desc: 'Returns the year part of a date or a timestamp string: year("1970-01-01 00:00:00") = 1970, year("1970-01-01") = 1970.',
    returnType: 'year(string date)',
    name: 'year',
    synax: 'year(string date)',
  },
  {
    desc: "Returns the quarter of the year for a date, timestamp, or string in the range 1 to 4 (as of HiveÂ 1.3.0). Example: quarter('2015-04-08') = 2.",
    returnType: 'quarter(date/timestamp/string)',
    name: 'quarter',
    synax: 'quarter(date/timestamp/string)',
  },
  {
    desc: 'Returns the month part of a date or a timestamp string: month("1970-11-01 00:00:00") = 11, month("1970-11-01") = 11.',
    returnType: 'month(string date)',
    name: 'month',
    synax: 'month(string date)',
  },
  {
    desc: 'Returns the day part of a date or a timestamp string: day("1970-11-01 00:00:00") = 1, day("1970-11-01") = 1.',
    returnType: 'day(string date) dayofmonth(date)',
    name: 'day',
    synax: 'day(string date) dayofmonth(date)',
  },
  {
    desc: "Returns the hour of the timestamp: hour('2009-07-30 12:58:59') = 12, hour('12:58:59') = 12.",
    returnType: 'hour(string date)',
    name: 'hour',
    synax: 'hour(string date)',
  },
  {
    desc: 'Returns the minute of the timestamp.',
    returnType: 'minute(string date)',
    name: 'minute',
    synax: 'minute(string date)',
  },
  {
    desc: 'Returns the second of the timestamp.',
    returnType: 'second(string date)',
    name: 'second',
    synax: 'second(string date)',
  },
  {
    desc: 'Returns the week number of a timestamp string: weekofyear("1970-11-01 00:00:00") = 44, weekofyear("1970-11-01") = 44.',
    returnType: 'weekofyear(string date)',
    name: 'weekofyear',
    synax: 'weekofyear(string date)',
  },
  {
    desc: 'Retrieve fields such as days or hours from source (as of Hive 2.2.0). Source must be a date, timestamp, interval or a string that can be converted into either a date or timestamp. Supported fields include: day, dayofweek, hour, minute, month, quarter, second, week and year.Examples:select extract(month from "2016-10-20") results in 10.select extract(hour from "2016-10-20 05:06:07") results in 5.select extract(dayofweek from "2016-10-20 05:06:07") results in 5.select extract(month from interval \'1-3\' year to month) results in 3.select extract(minute from interval \'3 12:20:30\' day to second) results in 20.',
    returnType: 'extract(field FROM source)',
    name: 'extract',
    synax: 'extract(field FROM source)',
  },
  {
    desc: "Returns the number of days from startdate to enddate: datediff('2009-03-01', '2009-02-27') = 2.",
    returnType: 'datediff(string enddate, string startdate)',
    name: 'datediff',
    synax: 'datediff(string enddate, string startdate)',
  },
  {
    desc: "Adds a number of days to startdate: date_add('2008-12-31', 1) = '2009-01-01'.Prior to Hive 2.1.0 (HIVE-13248) the return type was a String because no Date type existed when the method was created.",
    returnType: 'date_add(date/timestamp/string startdate, tinyint/smallint/int days)',
    name: 'date_add',
    synax: 'date_add(date/timestamp/string startdate, tinyint/smallint/int days)',
  },
  {
    desc: "Subtracts a number of days to startdate: date_sub('2008-12-31', 1) = '2008-12-30'.Prior to Hive 2.1.0 (HIVE-13248) the return type was a String because no Date type existed when the method was created.",
    returnType: 'date_sub(date/timestamp/string startdate, tinyint/smallint/int days)',
    name: 'date_sub',
    synax: 'date_sub(date/timestamp/string startdate, tinyint/smallint/int days)',
  },
  {
    desc: "Converts a timestamp* in UTC to a given timezone (as of Hive 0.8.0).* timestamp is aÂ primitive type, including timestamp/date, tinyint/smallint/int/bigint, float/double and decimal.Fractional values are considered as seconds. Integer values are considered as milliseconds. For example, from_utc_timestamp(2592000.0,'PST'), from_utc_timestamp(2592000000,'PST') and from_utc_timestamp(timestamp '1970-01-30 16:00:00','PST') all return the timestamp 1970-01-30 08:00:00.",
    returnType: 'from_utc_timestamp({any primitive type} ts, string timezone)',
    name: 'from_utc_timestamp',
    synax: 'from_utc_timestamp({any primitive type} ts, string timezone)',
  },
  {
    desc: "Converts a timestamp* in a given timezone to UTC (as of Hive 0.8.0).* timestamp is aÂ primitive type, including timestamp/date, tinyint/smallint/int/bigint, float/double and decimal.Fractional values are considered as seconds. Integer values are considered as milliseconds. For example, to_utc_timestamp(2592000.0,'PST'), to_utc_timestamp(2592000000,'PST') and to_utc_timestamp(timestamp '1970-01-30 16:00:00','PST') all return the timestamp 1970-01-31 00:00:00.",
    returnType: 'to_utc_timestamp({any primitive type} ts, string timezone)',
    name: 'to_utc_timestamp',
    synax: 'to_utc_timestamp({any primitive type} ts, string timezone)',
  },
  {
    desc: 'Returns the current date at the start of query evaluation (as of Hive 1.2.0). All calls of current_date within the same query return the same value.',
    returnType: 'current_date',
    name: 'current_date',
    synax: 'current_date',
  },
  {
    desc: 'Returns the current timestamp at the start of query evaluation (as of Hive 1.2.0). All calls of current_timestamp within the same query return the same value.',
    returnType: 'current_timestamp',
    name: 'current_timestamp',
    synax: 'current_timestamp',
  },
  {
    desc: "Returns the date that is num_months after start_date (as of Hive 1.1.0). start_date is a string, date or timestamp. num_months is an integer. If start_date is the last day of the month or if the resulting month has fewer days than the day component of start_date, then the result is the last day of the resulting month. Otherwise, the result has the same day component as start_date. The default output format is 'yyyy-MM-dd'.Before Hive 4.0.0, the time part of the date is ignored.As of Hive 4.0.0, add_months supports an optional argument output_date_format, which accepts a String that represents a valid date format for the output. This allows to retain the time format in the output.For example :add_months('2009-08-31', 1) returns '2009-09-30'.add_months('2017-12-31 14:15:16', 2, 'YYYY-MM-dd HH:mm:ss') returns '2018-02-28 14:15:16'.",
    returnType: 'add_months(string start_date, int num_months, output_date_format)',
    name: 'add_months',
    synax: 'add_months(string start_date, int num_months, output_date_format)',
  },
  {
    desc: "Returns the last day of the month which the date belongs to (as of Hive 1.1.0). date is a string in the format 'yyyy-MM-dd HH:mm:ss' or 'yyyy-MM-dd'.Â The time part of date is ignored.",
    returnType: 'last_day(string date)',
    name: 'last_day',
    synax: 'last_day(string date)',
  },
  {
    desc: "Returns the first date which is later than start_date and named as day_of_week (as of Hive 1.2.0).Â start_date is a string/date/timestamp. day_of_week is 2 letters, 3 letters or full name of the day of the week (e.g. Mo, tue, FRIDAY). The time part of start_date is ignored. Example: next_day('2015-01-14', 'TU') = 2015-01-20.",
    returnType: 'next_day(string start_date, string day_of_week)',
    name: 'next_day',
    synax: 'next_day(string start_date, string day_of_week)',
  },
  {
    desc: "Returns date truncated to the unit specified by the format (as of Hive 1.2.0). Supported formats: MONTH/MON/MM, YEAR/YYYY/YY. Example: trunc('2015-03-17', 'MM') = 2015-03-01.",
    returnType: 'trunc(string date, string format)',
    name: 'trunc',
    synax: 'trunc(string date, string format)',
  },
  {
    desc: "Returns number of months between dates date1 and date2 (as of HiveÂ 1.2.0). If date1 is later than date2, then the result is positive. If date1 is earlier than date2, then the result is negative. If date1 and date2 are either the same days of the month or both last days of months, then the result is always an integer. Otherwise the UDF calculates the fractional portion of the result based on a 31-day month and considers the difference in time components date1 and date2. date1 and date2 type can be date, timestamp or string in the format 'yyyy-MM-dd' or 'yyyy-MM-dd HH:mm:ss'. The result is rounded to 8 decimal places. Example: months_between('1997-02-28 10:30:00', '1996-10-30') = 3.94959677",
    returnType: 'months_between(date1, date2)',
    name: 'months_between',
    synax: 'months_between(date1, date2)',
  },
  {
    desc: "Converts a date/timestamp/string to a value of string in the format specified by the date format fmt (as of HiveÂ 1.2.0). Supported formats are Java SimpleDateFormat formats â https://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html. The second argument fmt should be constant. Example: date_format('2015-04-08', 'y') = '2015'.date_format can be used to implement other UDFs, e.g.:dayname(date) is date_format(date, 'EEEE')dayofyear(date) is date_format(date, 'D')",
    returnType: 'date_format(date/timestamp/string ts, string fmt)',
    name: 'date_format',
    synax: 'date_format(date/timestamp/string ts, string fmt)',
  },
  {
    desc: 'Returns valueTrue when testCondition is true, returns valueFalseOrNull otherwise.',
    returnType: 'if(boolean testCondition, T valueTrue, T valueFalseOrNull)',
    name: 'if',
    synax: 'if(boolean testCondition, T valueTrue, T valueFalseOrNull)',
  },
  {
    desc: 'Returns true if a is NULL and false otherwise.',
    returnType: 'isnull( a )',
    name: 'isnull',
    synax: 'isnull( a )',
  },
  {
    desc: 'Returns true if a is not NULL and false otherwise.',
    returnType: 'isnotnull ( a )',
    name: 'isnotnull ',
    synax: 'isnotnull ( a )',
  },
  {
    desc: 'Returns default value if value is null else returns value (as of HIve 0.11).',
    returnType: 'nvl(T value, T default_value)',
    name: 'nvl',
    synax: 'nvl(T value, T default_value)',
  },
  {
    desc: "Returns the first v that is not NULL, or NULL if all v's are NULL.",
    returnType: 'COALESCE(T v1, T v2, ...)',
    name: 'COALESCE',
    synax: 'COALESCE(T v1, T v2, ...)',
  },
  {
    desc: 'When a = b, returns c; when a = d, returns e; else returns f.',
    returnType: 'CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END',
    name: 'CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END',
    synax: 'CASE a WHEN b THEN c [WHEN d THEN e]* [ELSE f] END',
  },
  {
    desc: 'When a = true, returns b; when c = true, returns d; else returns e.',
    returnType: 'CASE WHEN a THEN b [WHEN c THEN d]* [ELSE e] END',
    name: 'CASE WHEN a THEN b [WHEN c THEN d]* [ELSE e] END',
    synax: 'CASE WHEN a THEN b [WHEN c THEN d]* [ELSE e] END',
  },
  {
    desc: 'Returns NULL if a=b; otherwise returns a (as of Hive 2.3.0).Shorthand for: CASE WHEN a = b then NULL else a ',
    returnType: 'nullif( a, b )',
    name: 'nullif',
    synax: 'nullif( a, b )',
  },
  {
    desc: "Throw an exception if 'condition' is not true, otherwise return null (as of Hive 0.8.0). For example, select assert_true (2<1).",
    returnType: 'assert_true(boolean condition)',
    name: 'assert_true',
    synax: 'assert_true(boolean condition)',
  },
  {
    desc: 'Returns the numeric value of the first character of str.',
    returnType: 'ascii(string str)',
    name: 'ascii',
    synax: 'ascii(string str)',
  },
  {
    desc: 'Converts the argument from binary to a base 64 string (as of Hive 0.12.0).',
    returnType: 'base64(binary bin)',
    name: 'base64',
    synax: 'base64(binary bin)',
  },
  {
    desc: 'Returns the number of UTF-8 characters contained in str (as of Hive 2.2.0). The function char_length is shorthand for this function.',
    returnType: 'character_length(string str)',
    name: 'character_length',
    synax: 'character_length(string str)',
  },
  {
    desc: 'Returns the ASCII character having the binary equivalent to A (as of Hive 1.3.0 and 2.1.0). If A is larger than 256 the result is equivalent to chr(A % 256). Example: select chr(88); returns "X".',
    returnType: 'chr(bigint|double A)',
    name: 'chr',
    synax: 'chr(bigint|double A)',
  },
  {
    desc: "Returns the string or bytes resulting from concatenating the strings or bytes passed in as parameters in order. For example, concat('foo', 'bar') results in 'foobar'. Note that this function can take any number of input strings.",
    returnType: 'concat(string|binary A, string|binary B...)',
    name: 'concat',
    synax: 'concat(string|binary A, string|binary B...)',
  },
  {
    desc: 'Returns the top-k contextual N-grams from a set of tokenized sentences, given a string of "context". See StatisticsAndDataMining for more information.',
    returnType: 'context_ngrams(array<array<string>>, array<string>, int K, int pf)',
    name: 'context_ngrams',
    synax: 'context_ngrams(array<array<string>>, array<string>, int K, int pf)',
  },
  {
    desc: 'Like concat() above, but with custom separator SEP.',
    returnType: 'concat_ws(string SEP, string A, string B...)',
    name: 'concat_ws',
    synax: 'concat_ws(string SEP, string A, string B...)',
  },
  {
    desc: 'Like concat_ws() above, but taking an array of strings. (as of Hive 0.9.0)',
    returnType: 'concat_ws(string SEP, array<string>)',
    name: 'concat_ws',
    synax: 'concat_ws(string SEP, array<string>)',
  },
  {
    desc: "Decodes the first argument into a String using the provided character set (one of 'US-ASCII', 'ISO-8859-1', 'UTF-8', 'UTF-16BE', 'UTF-16LE', 'UTF-16'). If either argument is null, the result will also be null. (As of Hive 0.12.0.)",
    returnType: 'decode(binary bin, string charset)',
    name: 'decode',
    synax: 'decode(binary bin, string charset)',
  },
  {
    desc: "Return string at index number. For example elt(2,'hello','world') returns 'world'. Returns NULL if N is less than 1 or greater than the number of arguments.(see https://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_elt)",
    returnType: 'elt(N int,str1 string,str2 string,str3 string,...)',
    name: 'elt',
    synax: 'elt(N int,str1 string,str2 string,str3 string,...)',
  },
  {
    desc: "Encodes the first argument into a BINARY using the provided character set (one of 'US-ASCII', 'ISO-8859-1', 'UTF-8', 'UTF-16BE', 'UTF-16LE', 'UTF-16'). If either argument is null, the result will also be null. (As of Hive 0.12.0.)",
    returnType: 'encode(string src, string charset)',
    name: 'encode',
    synax: 'encode(string src, string charset)',
  },
  {
    desc: "Returns the index of val in the val1,val2,val3,... list or 0 if not found.  For example field('world','say','hello','world') returns 3.All primitive types are supported, arguments are compared using str.equals(x). If val is NULL, the return value is 0.(see https://dev.mysql.com/doc/refman/5.7/en/string-functions.html#function_field)",
    returnType: 'field(val T,val1 T,val2 T,val3 T,...) ',
    name: 'field',
    synax: 'field(val T,val1 T,val2 T,val3 T,...) ',
  },
  {
    desc: "Returns the first occurance of str in strList where strList is a comma-delimited string. Returns null if either argument is null. Returns 0 if the first argument contains any commas. For example, find_in_set('ab', 'abc,b,ab,c,def') returns 3.",
    returnType: 'find_in_set(string str, string strList)',
    name: 'find_in_set',
    synax: 'find_in_set(string str, string strList)',
  },
  {
    desc: "Formats the number X to a format like '#,###,###.##', rounded to D decimal places, and returns the result as a string. If D is 0, the result has no decimal point or fractional part. (As of Hive 0.10.0; bug with float types fixed in Hive 0.14.0, decimal type support added in Hive 0.14.0)",
    returnType: 'format_number(number x, int d)',
    name: 'format_number',
    synax: 'format_number(number x, int d)',
  },
  {
    desc: 'Extracts json object from a json string based on json path specified, and returns json string of the extracted json object. It will return null if the input json string is invalid. NOTE: The json path can only have the characters [0-9a-z_], i.e., no upper-case or special characters. Also, the keys *cannot start with numbers.* This is due to restrictions on Hive column names.',
    returnType: 'get_json_object(string json_string, string path)',
    name: 'get_json_object',
    synax: 'get_json_object(string json_string, string path)',
  },
  {
    desc: 'Returns true if the string str appears as an entire line in filename.',
    returnType: 'in_file(string str, string filename)',
    name: 'in_file',
    synax: 'in_file(string str, string filename)',
  },
  {
    desc: 'Returns the position of the first occurrence of substr in str. Returns null if either of the arguments are null and returns 0 if substr could not be found in str. Be aware that this is not zero based. The first character in str has index 1.',
    returnType: 'instr(string str, string substr)',
    name: 'instr',
    synax: 'instr(string str, string substr)',
  },
  {
    desc: 'Returns the length of the string.',
    returnType: 'length(string A)',
    name: 'length',
    synax: 'length(string A)',
  },
  {
    desc: 'Returns the position of the first occurrence of substr in str after position pos.',
    returnType: 'locate(string substr, string str[, int pos])',
    name: 'locate',
    synax: 'locate(string substr, string str[, int pos])',
  },
  {
    desc: "Returns the string resulting from converting all characters of B to lower case. For example, lower('fOoBaR') results in 'foobar'.",
    returnType: 'lower(string A) lcase(string A)',
    name: 'lower',
    synax: 'lower(string A) lcase(string A)',
  },
  {
    desc: 'Returns str, left-padded with pad to a length of len. If str is longer than len, the return value is shortened to len characters. In case of empty pad string, the return value is null.',
    returnType: 'lpad(string str, int len, string pad)',
    name: 'lpad',
    synax: 'lpad(string str, int len, string pad)',
  },
  {
    desc: "Returns the string resulting from trimming spaces from the beginning(left hand side) of A. For example, ltrim(' foobar ') results in 'foobar '.",
    returnType: 'ltrim(string A)',
    name: 'ltrim',
    synax: 'ltrim(string A)',
  },
  {
    desc: 'Returns the top-k N-grams from a set of tokenized sentences, such as those returned by the sentences() UDAF. See StatisticsAndDataMining for more information.',
    returnType: 'ngrams(array<array<string>>, int N, int K, int pf)',
    name: 'ngrams',
    synax: 'ngrams(array<array<string>>, int N, int K, int pf)',
  },
  {
    desc: 'Returns the number of octets required to hold the string str in UTF-8 encoding (since Hive 2.2.0). Note that octet_length(str) can be larger than character_length(str).',
    returnType: 'octet_length(string str)',
    name: 'octet_length',
    synax: 'octet_length(string str)',
  },
  {
    desc: "Returns the specified part from the URL. Valid values for partToExtract include HOST, PATH, QUERY, REF, PROTOCOL, AUTHORITY, FILE, and USERINFO. For example, parse_url('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1', 'HOST') returns 'facebook.com'. Also a value of a particular key in QUERY can be extracted by providing the key as the third argument, for example, parse_url('http://facebook.com/path1/p.php?k1=v1&k2=v2#Ref1', 'QUERY', 'k1') returns 'v1'.",
    returnType: 'parse_url(string urlString, string partToExtract [, string keyToExtract])',
    name: 'parse_url',
    synax: 'parse_url(string urlString, string partToExtract [, string keyToExtract])',
  },
  {
    desc: 'Returns the input formatted according do printf-style format strings (as of Hive 0.9.0).',
    returnType: 'printf(String format, Obj... args)',
    name: 'printf',
    synax: 'printf(String format, Obj... args)',
  },
  {
    desc: "Returns the quoted string (Includes escape character for any single quotes HIVE-4.0.0)InputOutputNULLNULLDONT'DONT'DON'T'DON\\'T'",
    returnType: 'quote(String text)',
    name: 'quote',
    synax: 'quote(String text)',
  },
  {
    desc: "Returns the string extracted using the pattern. For example, regexp_extract('foothebar', 'foo(.*?)(bar)', 2) returns 'bar.' Note that some care is necessary in using predefined character classes: using '\\s' as the second argument will match the letter s; '\\\\s' is necessary to match whitespace, etc. The 'index' parameter is the Java regex Matcher group() method index. See docs/api/java/util/regex/Matcher.html for more information on the 'index' or Java regex group() method.",
    returnType: 'regexp_extract(string subject, string pattern, int index)',
    name: 'regexp_extract',
    synax: 'regexp_extract(string subject, string pattern, int index)',
  },
  {
    desc: 'Returns the string resulting from replacing all substrings in INITIAL_STRING that match the java regular expression syntax defined in PATTERN with instances of REPLACEMENT. For example, regexp_replace("foobar", "oo|ar", "") returns \'fb.\' Note that some care is necessary in using predefined character classes: using \'\\s\' as the second argument will match the letter s; \'\\\\s\' is necessary to match whitespace, etc.',
    returnType: 'regexp_replace(string INITIAL_STRING, string PATTERN, string REPLACEMENT)',
    name: 'regexp_replace',
    synax: 'regexp_replace(string INITIAL_STRING, string PATTERN, string REPLACEMENT)',
  },
  {
    desc: 'Repeats str n times.',
    returnType: 'repeat(string str, int n)',
    name: 'repeat',
    synax: 'repeat(string str, int n)',
  },
  {
    desc: 'Returns the string A with all non-overlappingÂ occurrences of OLD replaced with NEW (as of Hive 1.3.0 and 2.1.0). Example: select replace("ababab", "abab", "Z"); returns "Zab".',
    returnType: 'replace(string A, string OLD, string NEW)',
    name: 'replace',
    synax: 'replace(string A, string OLD, string NEW)',
  },
  {
    desc: 'Returns the reversed string.',
    returnType: 'reverse(string A)',
    name: 'reverse',
    synax: 'reverse(string A)',
  },
  {
    desc: 'Returns str, right-padded with pad to a length of len. If str is longer than len, the return value is shortened to len characters. In case of empty pad string, the return value is null.',
    returnType: 'rpad(string str, int len, string pad)',
    name: 'rpad',
    synax: 'rpad(string str, int len, string pad)',
  },
  {
    desc: "Returns the string resulting from trimming spaces from the end(right hand side) of A. For example, rtrim(' foobar ') results in ' foobar'.",
    returnType: 'rtrim(string A)',
    name: 'rtrim',
    synax: 'rtrim(string A)',
  },
  {
    desc: 'Tokenizes a string of natural language text into words and sentences, where each sentence is broken at the appropriate sentence boundary and returned as an array of words. The \'lang\' and \'locale\' are optional arguments. For example, sentences(\'Hello there! How are you?\') returns ( ("Hello", "there"), ("How", "are", "you") ).',
    returnType: 'sentences(string str, string lang, string locale)',
    name: 'sentences',
    synax: 'sentences(string str, string lang, string locale)',
  },
  {
    desc: 'Returns a string of n spaces.',
    returnType: 'space(int n)',
    name: 'space',
    synax: 'space(int n)',
  },
  {
    desc: 'Splits str around pat (pat is a regular expression).',
    returnType: 'split(string str, string pat)',
    name: 'split',
    synax: 'split(string str, string pat)',
  },
  {
    desc: "Splits text into key-value pairs using two delimiters. Delimiter1 separates text into K-V pairs, and Delimiter2 splits each K-V pair. Default delimiters are ',' for delimiter1 and ':' for delimiter2.",
    returnType: 'str_to_map(text[, delimiter1, delimiter2])',
    name: 'str_to_map',
    synax: 'str_to_map(text[, delimiter1, delimiter2])',
  },
  {
    desc: "Returns the substring or slice of the byte array of A starting from start position till the end of string A. For example, substr('foobar', 4) results in 'bar' (see [http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#function_substr]).",
    returnType: 'substr(string|binary A, int start) substring(string|binary A, int start)',
    name: 'substr',
    synax: 'substr(string|binary A, int start) substring(string|binary A, int start)',
  },
  {
    desc: "Returns the substring or slice of the byte array of A starting from start position with length len. For example, substr('foobar', 4, 1) results in 'b' (see [http://dev.mysql.com/doc/refman/5.0/en/string-functions.html#function_substr]).",
    returnType: 'substr(string|binary A, int start, int len) substring(string|binary A, int start, int len)',
    name: 'substr',
    synax: 'substr(string|binary A, int start, int len) substring(string|binary A, int start, int len)',
  },
  {
    desc: "Returns the substring from string A before count occurrences of the delimiter delim (as of Hive 1.3.0). If count is positive, everything to the left of the final delimiter (counting from the left) is returned. If count is negative, everything to the right of the final delimiter (counting from the right) is returned. Substring_index performs a case-sensitive match when searching for delim. Example: substring_index('www.apache.org', '.', 2) = 'www.apache'.",
    returnType: 'substring_index(string A, string delim, int count)',
    name: 'substring_index',
    synax: 'substring_index(string A, string delim, int count)',
  },
  {
    desc: 'Translates the input string by replacing the characters present in the from string with the corresponding characters in the to string. This is similar to the translate function in PostgreSQL. If any of the parameters to this UDF are NULL, the result is NULL as well. (Available as of Hive 0.10.0, for string types)Char/varchar support added as of Hive 0.14.0.',
    returnType: 'translate(string|char|varchar input, string|char|varchar from, string|char|varchar to)',
    name: 'translate',
    synax: 'translate(string|char|varchar input, string|char|varchar from, string|char|varchar to)',
  },
  {
    desc: "Returns the string resulting from trimming spaces from both ends of A. For example, trim(' foobar ') results in 'foobar'",
    returnType: 'trim(string A)',
    name: 'trim',
    synax: 'trim(string A)',
  },
  {
    desc: 'Converts the argument from a base 64 string to BINARY. (As of Hive 0.12.0.)',
    returnType: 'unbase64(string str)',
    name: 'unbase64',
    synax: 'unbase64(string str)',
  },
  {
    desc: "Returns the string resulting from converting all characters of A to upper case. For example, upper('fOoBaR') results in 'FOOBAR'.",
    returnType: 'upper(string A) ucase(string A)',
    name: 'upper',
    synax: 'upper(string A) ucase(string A)',
  },
  {
    desc: 'Returns string, with the first letter of each word in uppercase, all other letters in lowercase. Words are delimited by whitespace. (As of Hive 1.1.0.)',
    returnType: 'initcap(string A)',
    name: 'initcap',
    synax: 'initcap(string A)',
  },
  {
    desc: "Returns the Levenshtein distance between two strings (as of Hive 1.2.0). For example, levenshtein('kitten', 'sitting') results in 3.",
    returnType: 'levenshtein(string A, string B)',
    name: 'levenshtein',
    synax: 'levenshtein(string A, string B)',
  },
  {
    desc: "Returns soundex code of the string (as of Hive 1.2.0). For example, soundex('Miller') results in M460.",
    returnType: 'soundex(string A)',
    name: 'soundex',
    synax: 'soundex(string A)',
  },
  {
    desc: 'Returns a masked version of str (as of Hive 2.1.0). By default, upper case letters are converted to "X", lower case letters are converted to "x" and numbers are converted to "n". For example mask("abcd-EFGH-8765-4321") results in xxxx-XXXX-nnnn-nnnn. You can override the characters used in the mask by supplying additional arguments: the second argument controls the mask character for upper case letters, the third argument for lower case letters and the fourth argument for numbers. For example, mask("abcd-EFGH-8765-4321", "U", "l", "#") results in llll-UUUU-####-####.',
    returnType: 'mask(string str[, string upper[, string lower[, string number]]])',
    name: 'mask',
    synax: 'mask(string str[, string upper[, string lower[, string number]]])',
  },
  {
    desc: 'Returns a masked version of str with the first n values masked (as of Hive 2.1.0). Upper case letters are converted to "X", lower case letters are converted to "x" and numbers are converted to "n". For example, mask_first_n("1234-5678-8765-4321", 4) results in nnnn-5678-8765-4321.',
    returnType: 'mask_first_n(string str[, int n])',
    name: 'mask_first_n',
    synax: 'mask_first_n(string str[, int n])',
  },
  {
    desc: 'Returns a masked version of str with the last n values masked (as of Hive 2.1.0). Upper case letters are converted to "X", lower case letters are converted to "x" and numbers are converted to "n". For example, mask_last_n("1234-5678-8765-4321", 4) results in 1234-5678-8765-nnnn.',
    returnType: 'mask_last_n(string str[, int n])',
    name: 'mask_last_n',
    synax: 'mask_last_n(string str[, int n])',
  },
  {
    desc: 'Returns a masked version of str, showing the first n characters unmasked (as of Hive 2.1.0). Upper case letters are converted to "X", lower case letters are converted to "x" and numbers are converted to "n". For example, mask_show_first_n("1234-5678-8765-4321", 4) results in 1234-nnnn-nnnn-nnnn.',
    returnType: 'mask_show_first_n(string str[, int n])',
    name: 'mask_show_first_n',
    synax: 'mask_show_first_n(string str[, int n])',
  },
  {
    desc: 'Returns a masked version of str, showing the last n characters unmaskedÂ (as of Hive 2.1.0). Upper case letters are converted to "X", lower case letters are converted to "x" and numbers are converted to "n". For example, mask_show_last_n("1234-5678-8765-4321", 4) results in nnnn-nnnn-nnnn-4321.',
    returnType: 'mask_show_last_n(string str[, int n])',
    name: 'mask_show_last_n',
    synax: 'mask_show_last_n(string str[, int n])',
  },
  {
    desc: 'Returns a hashed value based on str (as of Hive 2.1.0). The hash is consistent and can be used to join masked values together across tables. This function returns null for non-string types.',
    returnType: 'mask_hash(string|char|varchar str)',
    name: 'mask_hash',
    synax: 'mask_hash(string|char|varchar str)',
  },
  {
    desc: 'Synonym for reflect. (As of Hive 0.9.0.)',
    returnType: 'java_method(class, method[, arg1[, arg2..]])',
    name: 'java_method',
    synax: 'java_method(class, method[, arg1[, arg2..]])',
  },
  {
    desc: 'Calls a Java method by matching the argument signature, using reflection. (As of Hive 0.7.0.) See Reflect (Generic) UDF for examples.',
    returnType: 'reflect(class, method[, arg1[, arg2..]])',
    name: 'reflect',
    synax: 'reflect(class, method[, arg1[, arg2..]])',
  },
  {
    desc: 'Returns a hash value of the arguments. (As of Hive 0.4.)',
    returnType: 'hash(a1[, a2...])',
    name: 'hash',
    synax: 'hash(a1[, a2...])',
  },
  {
    desc: 'Returns current user name from the configured authenticator manager (as of Hive 1.2.0). Could be the same as the user provided when connecting, but with some authentication managers (for example HadoopDefaultAuthenticator) it could be different.',
    returnType: 'current_user()',
    name: 'current_user',
    synax: 'current_user()',
  },
  {
    desc: 'Returns current user name from the session state (as of Hive 2.2.0). This is the username provided when connecting to Hive.',
    returnType: 'logged_in_user()',
    name: 'logged_in_user',
    synax: 'logged_in_user()',
  },
  {
    desc: 'Returns current database name (as of Hive 0.13.0).',
    returnType: 'current_database()',
    name: 'current_database',
    synax: 'current_database()',
  },
  {
    desc: "Calculates an MD5 128-bit checksum for the string or binary (as of Hive 1.3.0). The value is returned as a string of 32 hex digits, or NULL if the argument was NULL. Example: md5('ABC') = '902fbdd2b1df0c4f70b4a5d23525e932'.",
    returnType: 'md5(string/binary)',
    name: 'md5',
    synax: 'md5(string/binary)',
  },
  {
    desc: "Calculates the SHA-1 digest for string or binary and returns the value as a hex string (as of Hive 1.3.0). Example: sha1('ABC') = '3c01bdbb26f358bab27f267924aa2c9a03fcfdb8'.",
    returnType: 'sha1(string/binary)sha(string/binary)',
    name: 'sha1',
    synax: 'sha1(string/binary)sha(string/binary)',
  },
  {
    desc: "Computes a cyclic redundancy check value for string or binary argument and returns bigint value (as of Hive 1.3.0). Example: crc32('ABC') = 2743272264.",
    returnType: 'crc32(string/binary)',
    name: 'crc32',
    synax: 'crc32(string/binary)',
  },
  {
    desc: "Calculates the SHA-2 family of hash functions (SHA-224, SHA-256, SHA-384, and SHA-512) (as of Hive 1.3.0). The first argument is the string or binary to be hashed. The second argument indicates the desired bit length of the result, which must have a value of 224, 256, 384, 512, or 0 (which is equivalent to 256). SHA-224 is supported starting from Java 8. If either argument is NULL or the hash length is not one of the permitted values, the return value is NULL. Example: sha2('ABC', 256) = 'b5d4045c3f466fa91fe2cc6abe79232a1a57cdf104f7a26e716e0a1e2789df78'.",
    returnType: 'sha2(string/binary, int)',
    name: 'sha2',
    synax: 'sha2(string/binary, int)',
  },
  {
    desc: "Encrypt input using AES (as of Hive 1.3.0). Key lengths of 128, 192 or 256 bits can be used. 192 and 256 bits keys can be used if Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files are installed. If either argument is NULL or the key length is not one of the permitted values, the return value is NULL. Example: base64(aes_encrypt('ABC', '1234567890123456')) = 'y6Ss+zCYObpCbgfWfyNWTw=='.",
    returnType: 'aes_encrypt(input string/binary, key string/binary)',
    name: 'aes_encrypt',
    synax: 'aes_encrypt(input string/binary, key string/binary)',
  },
  {
    desc: "Decrypt input using AES (as of Hive 1.3.0). Key lengths of 128, 192 or 256 bits can be used. 192 and 256 bits keys can be used if Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files are installed. If either argument is NULL or the key length is not one of the permitted values, the return value is NULL. Example: aes_decrypt(unbase64('y6Ss+zCYObpCbgfWfyNWTw=='), '1234567890123456') = 'ABC'.",
    returnType: 'aes_decrypt(input binary, key string/binary)',
    name: 'aes_decrypt',
    synax: 'aes_decrypt(input binary, key string/binary)',
  },
  {
    desc: 'Returns the Hive version (as of Hive 2.1.0). The string contains 2 fields, the first being a build number and the second being a build hash. Example: "select version();" might return "2.1.0.2.5.0.0-1245 r027527b9c5ce1a3d7d0b6d2e6de2378fb0c39232". Actual results will depend on your build.',
    returnType: 'version()',
    name: 'version',
    synax: 'version()',
  },
  {
    desc: 'Automatically generate numerical Ids for rows as you enter data into a table. Can only be used as default value for acid or insert-only tables.',
    returnType: 'surrogate_key([write_id_bits, task_id_bits])',
    name: 'surrogate_key',
    synax: 'surrogate_key([write_id_bits, task_id_bits])',
  },
  {
    desc: 'count(*) - Returns the total number of retrieved rows, including rows containing NULL values.count(expr) - Returns the number of rows for which the supplied expression is non-NULL.count(DISTINCT expr[, expr]) - Returns the number of rows for which the supplied expression(s) are unique and non-NULL. Execution of this can be optimized with hive.optimize.distinct.rewrite.',
    returnType: 'count(*), count(expr), count(DISTINCT expr[, expr...])',
    name: 'count',
    synax: 'count(*), count(expr), count(DISTINCT expr[, expr...])',
  },
  {
    desc: 'Returns the sum of the elements in the group or the sum of the distinct values of the column in the group.',
    returnType: 'sum(col), sum(DISTINCT col)',
    name: 'sum',
    synax: 'sum(col), sum(DISTINCT col)',
  },
  {
    desc: 'Returns the average of the elements in the group or the average of the distinct values of the column in the group.',
    returnType: 'avg(col), avg(DISTINCT col)',
    name: 'avg',
    synax: 'avg(col), avg(DISTINCT col)',
  },
  {
    desc: 'Returns the minimum of the column in the group.',
    returnType: 'min(col)',
    name: 'min',
    synax: 'min(col)',
  },
  {
    desc: 'Returns the maximum value of the column in the group.',
    returnType: 'max(col)',
    name: 'max',
    synax: 'max(col)',
  },
  {
    desc: 'Returns the variance of a numeric column in the group.',
    returnType: 'variance(col), var_pop(col)',
    name: 'variance',
    synax: 'variance(col), var_pop(col)',
  },
  {
    desc: 'Returns the unbiased sample variance of a numeric column in the group.',
    returnType: 'var_samp(col)',
    name: 'var_samp',
    synax: 'var_samp(col)',
  },
  {
    desc: 'Returns the standard deviation of a numeric column in the group.',
    returnType: 'stddev_pop(col)',
    name: 'stddev_pop',
    synax: 'stddev_pop(col)',
  },
  {
    desc: 'Returns the unbiased sample standard deviation of a numeric column in the group.',
    returnType: 'stddev_samp(col)',
    name: 'stddev_samp',
    synax: 'stddev_samp(col)',
  },
  {
    desc: 'Returns the population covariance of a pair of numeric columns in the group.',
    returnType: 'covar_pop(col1, col2)',
    name: 'covar_pop',
    synax: 'covar_pop(col1, col2)',
  },
  {
    desc: 'Returns the sample covariance of a pair of a numeric columns in the group.',
    returnType: 'covar_samp(col1, col2)',
    name: 'covar_samp',
    synax: 'covar_samp(col1, col2)',
  },
  {
    desc: 'Returns the Pearson coefficient of correlation of a pair of a numeric columns in the group.',
    returnType: 'corr(col1, col2)',
    name: 'corr',
    synax: 'corr(col1, col2)',
  },
  {
    desc: 'Returns the exact pth percentile of a column in the group (does not work with floating point types). p must be between 0 and 1. NOTE: A true percentile can only be computed for integer values. Use PERCENTILE_APPROX if your input is non-integral.',
    returnType: 'percentile(BIGINT col, p)',
    name: 'percentile',
    synax: 'percentile(BIGINT col, p)',
  },
  {
    desc: 'Returns the exact percentiles p1, p2, ... of a column in the group (does not work with floating point types). pi must be between 0 and 1. NOTE: A true percentile can only be computed for integer values. Use PERCENTILE_APPROX if your input is non-integral.',
    returnType: 'percentile(BIGINT col, array(p1 [, p2]...))',
    name: 'percentile',
    synax: 'percentile(BIGINT col, array(p1 [, p2]...))',
  },
  {
    desc: 'Returns an approximate pth percentile of a numeric column (including floating point types) in the group. The B parameter controls approximation accuracy at the cost of memory. Higher values yield better approximations, and the default is 10,000. When the number of distinct values in col is smaller than B, this gives an exact percentile value.',
    returnType: 'percentile_approx(DOUBLE col, p [, B])',
    name: 'percentile_approx',
    synax: 'percentile_approx(DOUBLE col, p [, B])',
  },
  {
    desc: 'Same as above, but accepts and returns an array of percentile values instead of a single one.',
    returnType: 'percentile_approx(DOUBLE col, array(p1 [, p2]...) [, B])',
    name: 'percentile_approx',
    synax: 'percentile_approx(DOUBLE col, array(p1 [, p2]...) [, B])',
  },
  {
    desc: 'Equivalent to avg(dependent). As of Hive 2.2.0.',
    returnType: 'regr_avgx(independent, dependent)',
    name: 'regr_avgx',
    synax: 'regr_avgx(independent, dependent)',
  },
  {
    desc: 'Equivalent to avg(independent). As of Hive 2.2.0.',
    returnType: 'regr_avgy(independent, dependent)',
    name: 'regr_avgy',
    synax: 'regr_avgy(independent, dependent)',
  },
  {
    desc: 'Returns the number of non-null pairs used to fit the linear regression line. As of Hive 2.2.0.',
    returnType: 'regr_count(independent, dependent)',
    name: 'regr_count',
    synax: 'regr_count(independent, dependent)',
  },
  {
    desc: 'Returns the y-intercept of the linear regression line, i.e. the value of b in the equation dependent = a * independent + b. As of Hive 2.2.0.',
    returnType: 'regr_intercept(independent, dependent)',
    name: 'regr_intercept',
    synax: 'regr_intercept(independent, dependent)',
  },
  {
    desc: 'Returns the coefficient of determination for the regression. As of Hive 2.2.0.',
    returnType: 'regr_r2(independent, dependent)',
    name: 'regr_r2',
    synax: 'regr_r2(independent, dependent)',
  },
  {
    desc: 'Returns the slope of the linear regression line, i.e. the value of a in the equation dependent = a * independent + b. As of Hive 2.2.0.',
    returnType: 'regr_slope(independent, dependent)',
    name: 'regr_slope',
    synax: 'regr_slope(independent, dependent)',
  },
  {
    desc: 'Equivalent to regr_count(independent, dependent) * var_pop(dependent). As of Hive 2.2.0.',
    returnType: 'regr_sxx(independent, dependent)',
    name: 'regr_sxx',
    synax: 'regr_sxx(independent, dependent)',
  },
  {
    desc: 'Equivalent to regr_count(independent, dependent) * covar_pop(independent, dependent). As of Hive 2.2.0.',
    returnType: 'regr_sxy(independent, dependent)',
    name: 'regr_sxy',
    synax: 'regr_sxy(independent, dependent)',
  },
  {
    desc: 'Equivalent to regr_count(independent, dependent) * var_pop(independent). As of Hive 2.2.0.',
    returnType: 'regr_syy(independent, dependent)',
    name: 'regr_syy',
    synax: 'regr_syy(independent, dependent)',
  },
  {
    desc: 'Computes a histogram of a numeric column in the group using b non-uniformly spaced bins. The output is an array of size b of double-valued (x,y) coordinates that represent the bin centers and heights',
    returnType: 'histogram_numeric(col, b)',
    name: 'histogram_numeric',
    synax: 'histogram_numeric(col, b)',
  },
  {
    desc: 'Returns a set of objects with duplicate elements eliminated.',
    returnType: 'collect_set(col)',
    name: 'collect_set',
    synax: 'collect_set(col)',
  },
  {
    desc: 'Returns a list of objects with duplicates. (As of Hive 0.13.0.)',
    returnType: 'collect_list(col)',
    name: 'collect_list',
    synax: 'collect_list(col)',
  },
  {
    desc: 'Divides an ordered partition into x groups called buckets and assigns a bucket number to each row in the partition. This allows easy calculation of tertiles, quartiles, deciles, percentiles and other common summary statistics. (As of Hive 0.11.0.)',
    returnType: 'ntile(INTEGER x)',
    name: 'ntile',
    synax: 'ntile(INTEGER x)',
  },
]

export default FunctionKeywords
